@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq

@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

    <div class="umb-grid">
        @if (oneColumn)
        {
            foreach (var section in Model.sections)
            {
                <div class="grid-section">
                    @foreach (var row in section.rows)
                    {
                        @renderRow(row);
                    }
                </div>
            }
        }
        else
        {
            <div class="row clearfix">
                @foreach (var s in Model.sections)
                {
                    <div class="grid-section">
                        <div class="col-md-@s.grid col-sm-@s.grid column">
                            @foreach (var row in s.rows)
                            {
                                @renderRow(row);
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@helper renderRow(dynamic row)
{
    string rowName = row.name.ToString();
    var isFullWidth = rowName.StartsWith("FullWidth", StringComparison.OrdinalIgnoreCase) || rowName.StartsWith("Full Width", StringComparison.OrdinalIgnoreCase);
    var rowClass = isFullWidth ? "" : "container";

    <div @RenderElementAttributes(row)>
        <div class="@rowClass">
            @foreach (var area in row.areas)
            {
                var areaClass = isFullWidth ? string.Empty : "col-md-" + area.grid;
                if (rowName.Equals("FullWidth_6_6_cols", StringComparison.OrdinalIgnoreCase))
                {
                    areaClass = "col-xs-12 col-sm-12 col-md-6 col-lg-6 px-0";
                }
                <div class="@areaClass column">
                    <div @RenderElementAttributes(area)>
                        @foreach (var control in area.controls)
                        {
                            if (control != null && control.editor != null && control.editor.view != null)
                            {
                                <text>@Html.Partial("grid/editors/base", (object)control)</text>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value.ToString());
                attrs.Add(property.Name + "=\"" + propertyValue + "\"");
            }

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
            {
                var propertyValue = property.Value.ToString();
                if (string.IsNullOrWhiteSpace(propertyValue) == false)
                {
                    cssVals.Add(property.Name + ":" + propertyValue + ";");
                }
            }

            if (cssVals.Any())
            {
                attrs.Add("style='" + HttpUtility.HtmlAttributeEncode(string.Join(" ", cssVals)) + "'");
            }
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
}